{"version":3,"sources":["logo.svg","constants.js","components/Operation/index.js","components/NumPad/index.jsx","components/OperationWrapper/index.jsx","components/InfoPanel/index.jsx","components/Stars/index.jsx","components/Generator/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MODES","ADD","SUBSTR","ADD_SUBSTR","Operation","props","_ref","operation","mode","a","b","answer","sign","react_default","createElement","className","concat","signalWrongAnswer","type","value","onChange","e","onAnswer","target","keys","_","range","map","num","key","onClick","onPadClick","Generator","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","timer","clearInterval","interval","currentTime","state","setInterval","setState","handleAnswer","time","saveAnswer","objectSpread","debounce","bind","assertThisInitialized","prevProps","components_Operation","NumPad","Component","InfoPanel","results","correctResultsCount","filter","correct","length","sumBy","minutes","Math","floor","seconds","round","result","Stars","stars","star","index","OPERATIONS_COUNT","generateOperation","getMode","random","c","checkedOperation","checkAnswer","updatedOperations","toConsumableArray","operations","updatedStars","getUpdatedStars","currentOperation","display","isAnswerCorrect","setTimeout","setMode","cleanUp","generateStars","starsCount","forEach","push","modeIndex","_this2","console","log","Fragment","OperationWrapper","components_Stars","components_InfoPanel","App","components_Generator","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fe3dcbb2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const MODES = {\r\n  ADD: 'ADD',\r\n  SUBSTR: 'SUBSTR',\r\n  ADD_SUBSTR: 'ADD_SUBSTR'\r\n};\r\n","import React from 'react';\r\nimport { MODES } from '../../constants';\r\n\r\nconst Operation = props => {\r\n  const { mode, a, b } = props.operation ? props.operation : {};\r\n  const answer = props.answer;\r\n  const sign = mode === MODES.ADD ? '+' : '-';\r\n\r\n  return (\r\n    <div className={`operation ${props.signalWrongAnswer ? 'wrongAnswer' : ''}`}>\r\n      <p>\r\n        {a} {sign} {b} =\r\n      </p>\r\n      <input type=\"text\" value={answer} onChange={e => props.onAnswer(e.target.value)} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Operation;\r\n","import React from 'react';\r\nimport _ from 'lodash';\r\n\r\nconst Operation = props => {\r\n  const numbers = _.range(11);\r\n  const keys = numbers.map(num => (\r\n    <button key={num} onClick={() => props.onPadClick(num)}>\r\n      {num}\r\n    </button>\r\n  ));\r\n\r\n  return <div className=\"numPad\">{keys}</div>;\r\n};\r\n\r\nexport default Operation;\r\n","import React, { Component } from 'react';\r\nimport Operation from '../Operation';\r\nimport NumPad from '../NumPad';\r\nimport _ from 'lodash';\r\n\r\nclass Generator extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { timer: 0, answer: '' };\r\n    this.interval = null;\r\n    this.saveAnswer = _.debounce(this.saveAnswer, 400).bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.timer();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.operation !== this.props.operation && this.props.operation) {\r\n      //   console.log('update');\r\n\r\n      this.setState({ answer: '' });\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  timer = () => {\r\n    clearInterval(this.interval);\r\n    let currentTime = this.state.timer;\r\n\r\n    this.interval = setInterval(() => {\r\n      //   console.log(currentTime);\r\n      this.setState({ timer: currentTime++ });\r\n    }, 100);\r\n  };\r\n\r\n  handleAnswer = answer => {\r\n    const time = this.state.timer;\r\n    this.setState({ answer: answer }, () => {\r\n      this.saveAnswer(time);\r\n    });\r\n  };\r\n\r\n  saveAnswer = time => {\r\n    const operation = this.props.operation;\r\n\r\n    this.props.handleAnswer({\r\n      ...operation,\r\n      answer: this.state.answer,\r\n      time: time\r\n    });\r\n    this.setState({ timer: 0 }, () => {\r\n      clearInterval(this.interval);\r\n      this.timer();\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"operationWrapper\">\r\n        <Operation\r\n          operation={this.props.operation}\r\n          answer={this.state.answer}\r\n          onAnswer={this.handleAnswer}\r\n          signalWrongAnswer={this.props.signalWrongAnswer}\r\n        />\r\n        <NumPad onPadClick={this.handleAnswer} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Generator;\r\n","import React from 'react';\r\nimport _ from 'lodash';\r\n\r\nconst InfoPanel = props => {\r\n  const { results } = props;\r\n\r\n  const correctResultsCount = _.filter(results, { correct: true }).length;\r\n  const time = _.sumBy(results, 'time') / 10;\r\n  const minutes = Math.floor(time / 60);\r\n  const seconds = Math.round(time - minutes * 60);\r\n\r\n  const operation = result => {\r\n    return result.mode === 'ADD' ? (\r\n      <span>\r\n        {result.a} + {result.b}\r\n      </span>\r\n    ) : (\r\n      <span>\r\n        {result.a} - {result.b}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"resultsContainer\">\r\n      <div className=\"results\">\r\n        Correct Answers: <span className=\"correctAnswers\">{correctResultsCount}</span> / {results.length} <br />\r\n        Time: {minutes > 0 ? `${minutes} minutes ${seconds} seconds` : `${time} seconds`}\r\n      </div>\r\n      <div className=\"resultsTable\">\r\n        Results:\r\n        {results.map(result => (\r\n          <p>\r\n            <span className=\"resultRowSection\">\r\n              {operation(result)} = {result.answer}\r\n            </span>\r\n            <span className={`resultRowSection ${result.correct ? 'correct' : 'wrong'}`}>\r\n              {`${result.correct ? 'Correct' : 'Wrong'}`}\r\n            </span>\r\n            <span className=\"resultRowSection\">Time: {result.time} seconds</span>\r\n          </p>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InfoPanel;\r\n","import React from 'react';\r\n\r\nconst Stars = props => {\r\n  return (\r\n    <div className=\"starsContainer\">\r\n      {props.stars.map(star => (\r\n        <div\r\n          key={star.index}\r\n          className={`star ${star.correct == null ? 'not-set' : star.correct ? 'correct' : 'false'}`}\r\n        >\r\n          {' '}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Stars;\r\n","import React, { Component } from 'react';\r\nimport OperationWrapper from '../OperationWrapper';\r\nimport InfoPanel from '../InfoPanel';\r\nimport Stars from '../Stars';\r\nimport { MODES } from '../../constants';\r\nimport _ from 'lodash';\r\n\r\nconst OPERATIONS_COUNT = 20;\r\n\r\nclass Generator extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      operations: [],\r\n      currentOperation: null,\r\n      mode: null,\r\n      display: '',\r\n      stars: [],\r\n      signalWrongAnswer: false\r\n    };\r\n    this.getMode = this.getMode.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.generateStars();\r\n  }\r\n\r\n  generateOperation = () => {\r\n    const mode = this.getMode();\r\n\r\n    let a = _.random(10);\r\n    let b;\r\n    if (mode === MODES.ADD) {\r\n      b = _.random(10 - a);\r\n    } else {\r\n      b = _.random(10);\r\n      if (a < b) {\r\n        const c = a;\r\n        a = b;\r\n        b = c;\r\n      }\r\n    }\r\n\r\n    return {\r\n      mode,\r\n      a,\r\n      b\r\n    };\r\n  };\r\n\r\n  generateStars() {\r\n    const starsCount = _.range(OPERATIONS_COUNT);\r\n    const stars = [];\r\n    starsCount.forEach((star, index) => stars.push({ index, correct: null }));\r\n    this.setState({ stars });\r\n  }\r\n\r\n  getUpdatedStars(index, isAnswerCorrect) {\r\n    const updatedStars = [...this.state.stars].map(star => {\r\n      if (star.index === index) {\r\n        return { ...star, correct: isAnswerCorrect };\r\n      }\r\n      return star;\r\n    });\r\n\r\n    return updatedStars;\r\n  }\r\n\r\n  getMode() {\r\n    if (this.state.mode === MODES.ADD || this.state.mode === MODES.SUBSTR) {\r\n      return this.state.mode;\r\n    } else {\r\n      const modeIndex = _.random(1);\r\n      return MODES[Object.keys(MODES)[modeIndex]];\r\n    }\r\n  }\r\n\r\n  handleAnswer = operation => {\r\n    let checkedOperation = this.checkAnswer(operation);\r\n    const updatedOperations = [...this.state.operations, checkedOperation];\r\n    const updatedStars = this.getUpdatedStars(updatedOperations.length - 1, checkedOperation.correct);\r\n    this.setState({ operations: updatedOperations, stars: updatedStars }, () => {\r\n      if (this.state.operations.length < OPERATIONS_COUNT) {\r\n        this.setState({ currentOperation: this.generateOperation() });\r\n      } else {\r\n        this.setState({ display: 'result' });\r\n      }\r\n    });\r\n  };\r\n\r\n  checkAnswer = operation => {\r\n    const { a, b, answer, mode } = operation;\r\n    let isAnswerCorrect = false;\r\n    if (mode === MODES.ADD) {\r\n      isAnswerCorrect = a + b === +answer;\r\n    } else {\r\n      isAnswerCorrect = a - b === +answer;\r\n    }\r\n\r\n    if (!isAnswerCorrect) {\r\n      this.setState({ signalWrongAnswer: true }, () => {\r\n        setTimeout(() => {\r\n          this.setState({ signalWrongAnswer: false });\r\n        }, 500);\r\n      });\r\n    }\r\n    return { ...operation, correct: isAnswerCorrect };\r\n  };\r\n\r\n  setMode = mode => {\r\n    this.setState({ mode: mode, display: 'operations' }, () => {\r\n      this.cleanUp();\r\n      this.setState({ currentOperation: this.generateOperation() });\r\n    });\r\n  };\r\n\r\n  cleanUp = () => {\r\n    this.setState({\r\n      operations: []\r\n    });\r\n  };\r\n\r\n  render() {\r\n    console.log(this.state);\r\n    return (\r\n      <React.Fragment>\r\n        <button\r\n          className={`modeButton ${this.state.mode === MODES.ADD ? 'active' : null}`}\r\n          onClick={() => this.setMode(MODES.ADD)}\r\n        >\r\n          Addition\r\n        </button>\r\n        <button\r\n          className={`modeButton ${this.state.mode === MODES.SUBSTR ? 'active' : null}`}\r\n          onClick={() => this.setMode(MODES.SUBSTR)}\r\n        >\r\n          Substraction\r\n        </button>\r\n        <button\r\n          className={`modeButton ${this.state.mode === MODES.ADD_SUBSTR ? 'active' : null}`}\r\n          onClick={() => this.setMode(MODES.ADD_SUBSTR)}\r\n        >\r\n          Addition + Substraction\r\n        </button>\r\n        {this.state.mode ? (\r\n          this.state.display === 'operations' ? (\r\n            <React.Fragment>\r\n              <OperationWrapper\r\n                operation={this.state.currentOperation}\r\n                handleAnswer={this.handleAnswer}\r\n                signalWrongAnswer={this.state.signalWrongAnswer}\r\n              />\r\n              <Stars stars={this.state.stars} />\r\n            </React.Fragment>\r\n          ) : (\r\n            <InfoPanel results={this.state.operations} />\r\n          )\r\n        ) : (\r\n          <div className=\"modepick\">Pick a mode</div>\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Generator;\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Generator from './components/Generator';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        {/* <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a className=\"App-link\" href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n            Learn React\n          </a>\n        </header> */}\n        <Generator />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}